{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "任何一个工科生都不会对傅利叶变换感到陌生:傅利叶变换可以将一个信号从时域转换到复频域,这样就能愉快地在复频域分析信号啦.虽然在用的时候司空见惯,但在某一些时刻我还是会忍不住感叹--傅利叶变换真是太妙了!\n",
    "    \n",
    "其实,从在课堂上学到傅利叶变换后的很长一段时间里我都还没有领会到其妙处,直到我看到了这个视频: \n",
    "[![形象展示傅里叶变换](img/ft_video.png)](https://www.bilibili.com/video/BV1pW411J7s8)\n",
    "\n",
    "这个视频通过数学动画将傅利叶变换形象地展示了出来.受这个视频的启发,我也写了一个交互式的小程序来体会傅利叶变换的精妙之处.\n",
    "\n",
    "$$\\mathscr{F}[f(t)] = \\int^{+\\infty}_{-\\infty} f(t) e^{-i\\omega t}dt  $$\n",
    "\n",
    "![ftg](img/ftg.GIF)\n",
    "\n",
    "\n",
    ">**注意**: 要体验交互功能,您需要点击右上角下载.ipynb文件后在本地运行.如果您不熟悉jupyter notebook,请看[这里](https://jupyter.org/)\n",
    "\n",
    "---\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 傅利叶变换: 以$f(t) = sin(2\\pi t)$为例"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. 画出$f(t)=sin(2 \\pi t)$图像"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "from ipywidgets import interactive\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.widgets import TextBox\n",
    "import numpy as np\n",
    "plt.rcParams['figure.figsize'] = (10.0, 10.0)\n",
    "\n",
    "def set_center_axis(ax):\n",
    "    ax.spines['right'].set_color('none')\n",
    "    ax.spines['top'].set_color('none')\n",
    "    ax.spines['bottom'].set_position(('data', 0))\n",
    "    ax.spines['left'].set_position(('data', 0))\n",
    "\n",
    "t = np.linspace(-2, 2, num=1000)\n",
    "f = np.sin(2*np.pi*t)\n",
    "plt.plot(t,f)\n",
    "set_center_axis(plt.gca())\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. $e^{-i\\omega t}$长什么样子?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 63/63 [00:19<00:00,  3.21it/s]\n"
     ]
    }
   ],
   "source": [
    "from tqdm import tqdm\n",
    "n = 0\n",
    "def F(omega,t):\n",
    "    z = np.exp(-1j*omega*t)\n",
    "    plt.arrow(0,0,z.real,z.imag,head_width=0.05, head_length=0.1)\n",
    "    plt.xlim(-1.1,1.1)\n",
    "    plt.ylim(-1.1,1.1)\n",
    "    set_center_axis(plt.gca())\n",
    "    ax1 = plt.gca()\n",
    "    ax1.set_xlabel('real',position=(1,0),fontsize = 14)\n",
    "    ax1.set_ylabel('imag',position=(0,1),fontsize = 14)\n",
    "    set_center_axis(plt.gca())\n",
    "    textstr = '\\n'.join((r'$e^{-i%.2f t}$' % (omega, ),))\n",
    "    ax1.text(0.5,0.5,textstr,fontsize = 30)\n",
    "    global n\n",
    "    n += 1\n",
    "    plt.savefig('img/e_'+str(n)+'.png')\n",
    "    plt.close()\n",
    "    \n",
    "for omega in tqdm(np.arange(0,2*np.pi,0.1)):\n",
    "    F(omega,1)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "bf34081fd4da40f79886b15b40429deb",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "interactive(children=(FloatSlider(value=3.1, description='omega', max=6.283185307179586), FloatSlider(value=3.…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "n = 0\n",
    "def F(omega,t):\n",
    "    z = np.exp(-1j*omega*t)\n",
    "    print(z)\n",
    "    plt.arrow(0,0,z.real,z.imag,head_width=0.05, head_length=0.1)\n",
    "    plt.xlim(-1.1,1.1)\n",
    "    plt.ylim(-1.1,1.1)\n",
    "    ax1 = plt.gca()\n",
    "    ax1.set_xlabel('real',position=(1,0),fontsize = 14)\n",
    "    ax1.set_ylabel('imag',position=(0,1),fontsize = 14)\n",
    "    set_center_axis(plt.gca())\n",
    "    textstr = '\\n'.join((r'$e^{-i%.2f t}$' % (omega, ),))\n",
    "    ax1.text(0.5,0.5,textstr,fontsize = 30)\n",
    "#     global n\n",
    "#     n += 1\n",
    "#     plt.savefig('img/e_'+str(n)+'.png')\n",
    "\n",
    "    \n",
    "interactive_plot = interactive(F,omega=(0, 2*np.pi, 0.1),t=(0, 2*np.pi, 0.1))\n",
    "output = interactive_plot.children[-1]\n",
    "output.layout.height = '600px'\n",
    "\n",
    "interactive_plot"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![e](img/e.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. $sin(2\\pi t)e^{-2\\pi i \\omega t}$ 和 $\\left| \\mathscr{F}[sin(2\\pi t)] \\right|$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "a7a227158e5f4e55b9fc10aac9ef7af1",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "interactive(children=(FloatSlider(value=0.0, description='freq', max=2.0, min=-2.0, step=0.01), Output(layout=…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "ft_line = np.empty(shape =(1,2))\n",
    "def F(freq):\n",
    "    global ft_line\n",
    "    fig, (ax1, ax2) = plt.subplots(2, 1)\n",
    "    t = np.linspace(0, np.pi, num=1000)\n",
    "    ft = np.exp(2*np.pi*freq*1j*t) * np.sin(2*np.pi*t)\n",
    "    Amp = abs(ft.sum())\n",
    "    if ft_line.shape ==(1,2):\n",
    "        ft_line = np.array([[freq,Amp]])\n",
    "    ft_line = np.append(ft_line,np.array([[freq,Amp]]),axis=0)\n",
    "    ax1.plot(ft.real,ft.imag)\n",
    "    set_center_axis(ax1)\n",
    "    ax1.set_xlabel('real',position=(1,0),fontsize = 14)\n",
    "    ax1.set_ylabel('imag',position=(0,1),fontsize = 14)\n",
    "    ax1.set_aspect(1)\n",
    "    textstr = '\\n'.join((r'$sin(2\\pi t)e^{-2\\pi it}\\cdot e^{%.2f}$' % (freq, ),))\n",
    "    ax1.text(0.05,1.1,textstr,fontsize = 30)\n",
    "    ax2.scatter(ft_line[:,0],ft_line[:,1])\n",
    "    ax2.set_xlabel('$freq$',fontsize=14)\n",
    "    textstr2 = '\\n'.join((r'$ A = \\left|\\int^{+\\infty}_{-\\infty}sin(2\\pi t)e^{-2\\pi it}\\cdot e^{%.2f} dt\\right|$' % (freq, ),))\n",
    "    ax2.set_ylabel(textstr2,fontsize = 14)\n",
    "    \n",
    "interactive_plot = interactive(F,freq=(-2, 2, 0.01))\n",
    "output = interactive_plot.children[-1]\n",
    "output.layout.height = '1000px'\n",
    "\n",
    "interactive_plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 400/400 [02:53<00:00,  2.30it/s]\n"
     ]
    }
   ],
   "source": [
    "from tqdm import tqdm\n",
    "n = 0\n",
    "ft_line = np.empty(shape =(1,2))\n",
    "def F(freq,t):\n",
    "    global ft_line\n",
    "    fig, (ax1, ax2) = plt.subplots(2, 1)\n",
    "    t = np.linspace(0, np.pi, num=1000)\n",
    "    ft = np.exp(2*np.pi*freq*1j*t) * np.sin(2*np.pi*t)\n",
    "    Amp = abs(ft.sum())\n",
    "    if ft_line.shape ==(1,2):\n",
    "        ft_line = np.array([[freq,Amp]])\n",
    "    ft_line = np.append(ft_line,np.array([[freq,Amp]]),axis=0)\n",
    "    ax1.plot(ft.real,ft.imag)\n",
    "    set_center_axis(ax1)\n",
    "    ax1.set_xlabel('real',position=(1,0),fontsize = 14)\n",
    "    ax1.set_ylabel('imag',position=(0,1),fontsize = 14)\n",
    "    ax1.set_aspect(1)\n",
    "    textstr = '\\n'.join((r'$sin(2\\pi t)e^{-2\\pi it}\\cdot e^{%.2f}$' % (freq, ),))\n",
    "    ax1.text(0.05,1.1,textstr,fontsize = 30)\n",
    "    ax2.scatter(ft_line[:,0],ft_line[:,1])\n",
    "    ax2.set_xlabel('$freq$',fontsize=14)\n",
    "    textstr2 = '\\n'.join((r'$ A = \\left|\\int^{+\\infty}_{-\\infty}sin(2\\pi t)e^{-2\\pi it}\\cdot e^{%.2f} dt\\right|$' % (freq, ),))\n",
    "    ax2.set_ylabel(textstr2,fontsize = 14)\n",
    "    global n\n",
    "    n += 1\n",
    "    plt.savefig('img/e_'+str(n)+'.png')\n",
    "    plt.close()\n",
    "    \n",
    "for omega in tqdm(np.arange(-2,2,0.01)):\n",
    "    F(omega,1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![ft](img/ft.png)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
